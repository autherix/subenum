#!/usr/bin/env bash

source /ptv/rtsetup.sh
SCRIPTPATH=$(dirname "$0")
# Source the file in $scriptpath/../creds.sh
source $SCRIPTPATH/../creds.sh

help() {
    echo -e "Scoper - submodule of subenum - healerenum - fetch target scopes from h1
Usage:
\tscoper -t|--target <targetname> [options]

Options:
\t-t|--target <target name>\t*(Required)*\tTarget Name
\t-h|--help\t\t\tShow this help message and exit
\t--eligible\t\t\tShow only eligible URL assets
\t--url\t\t\t\tShow only eligible URL assets
\t--out-of-scope\t\t\tShow only out-of-scope URL assets

Examples:
scoper -t semrush --eligible --url\tFinds all eligible URL scopes for target called semrush
scoper -t elastic\t\t\tFinds all scopes for target called elastic (as json | jq)
scoper -t elastic --url\t\t\tFinds all URL scopes for target called elastic (as json | jq)
scoper -t elastic --out-of-scope\tFinds all out-of-scope URL scopes for target called elastic (as json | jq)
"
}


# Parsing flags
eligible_url=0
eligible=0
url=0
out_of_scope=0
tgtname=""
while [ -n "$1" ]; do
    key="$1"
    case "$key" in
      -h|--help)
        shift
        help;
        exit 0
        ;;
      -t|--target)
        # If a $2 exists, set tgtname to $2, otherwise exit with error message saying "No target name given"
        if [ -z "$2" ]; then
            seterror "No target name given"
        else
            tgtname=$2
        fi

        shift 2
        ;;
      --out-of-scope)
        out_of_scope=1
        shift
        ;;
      --eligible)
        eligible_url=1
        eligible=1
        shift
        ;;
      --url)
        eligible_url=1
        url=1
        shift
        ;;
      --)
        shift
        break
        ;;
      -*|--*)
        echo "Unknown option: $1"
        sep
        help
        exit 1
        ;;
      *)
        echo "Unknown option: $1"
        sep
        help
        exit 1
        ;;
    esac
done

# If tgtname is empty or is not set, exit with seterror function and error message.
if [ -z "${tgtname}" ]; then
    seterror "No target name given"
fi

# Fetch target's data from h1 api
tgt_info="""$(curl -sS "https://api.hackerone.com/v1/hackers/programs/$tgtname" \
  -X GET \
  -u "$h1username:$h1token" \
  -H 'Accept: application/json')"""
# If there was text "Team does not exist" in $tgt_info variable, exit with error message saying "No tagets found with this name"
if [[ $tgt_info == *"Team does not exist"* ]]; then
    seterror "No targets found with this name"
else
    # If there was no error process and return the scopes data
    scopes=$(echo $tgt_info | jq ".relationships.structured_scopes.data[]")
    # echo $scopes | jq

    # if and out_of_scope equals 1:
    if [ $out_of_scope -eq 1 ]; then
        ### Process More on Scopes
        # echo the scopes variable to the screen. | jq '.attributes | .asset_type' and save lines   to an array called tgt_asset_type
        tgt_asset_type=$(echo "${scopes}" | jq '.attributes | .asset_type')
        tgt_asset_identifier=$(echo "${scopes}" | jq '.attributes | .asset_identifier')
        tgt_eligible_for_submission=$(echo "${scopes}" | jq '.attributes | .eligible_for_submission')
        # count the lines of tgt_asset_type and save it to a variable called tgt_asset_type_count
        tgt_asset_type_count=$(echo "${tgt_asset_type}" | wc -l)

        # for 1 to tgt_asset_type_count, echo the i(th) element of tgt_asset_type to the screen remove the quotes
        # Define an empty array called url_assets
        url_assets=()
        for ((i=1; i<=${tgt_asset_type_count}; i++)); do
            this_eligible_for_submission=$(echo "${tgt_eligible_for_submission}" | sed -n "${i}p" | sed 's/"//  g')
            # if this_eligible_for_submission is false::
            if [ $this_eligible_for_submission == "false" ]; then
                this_asset_type=$(echo "${tgt_asset_type}" | sed -n "${i}p" | sed 's/"//g')
                this_asset_identifier=$(echo "${tgt_asset_identifier}" | sed -n "${i}p" | sed 's/"//  g')
                # If this_asset_type is "URL", append this_asset_identifier to the url_assets array
                if [ "${this_asset_type}" == "URL" ]; then
                    # If this_asset_identifier is not in the url_assets array, append it to the url_assets array
                    if [[ ! " ${url_assets[@]} " =~ " ${this_asset_identifier} " ]]; then
                        url_assets+=("${this_asset_identifier}")
                    fi
                fi
            fi
        done
        # Echo all the elements of the url_assets array to the screen each on a new line
        for i in "${url_assets[@]}"
        do
            echo $i
        done

        # If error code is 1, exit with error message and error code.
        if [ $? -eq 1 ]; then
            seterror "Error processing scopes"
        fi
    
    
    # elif  eligible_url equals 1 and out_of scope equals 0:
    elif [ $eligible_url -eq 1 ] && [ $out_of_scope -eq 0 ]; then
        ### Process More on Scopes
        # echo the scopes variable to the screen. | jq '.attributes | .asset_type' and save lines   to an array called tgt_asset_type
        tgt_asset_type=$(echo "${scopes}" | jq '.attributes | .asset_type')
        tgt_asset_identifier=$(echo "${scopes}" | jq '.attributes | .asset_identifier')
        tgt_eligible_for_bounty=$(echo "${scopes}" | jq '.attributes | .eligible_for_bounty')
        tgt_eligible_for_submission=$(echo "${scopes}" | jq '.attributes | .eligible_for_submission')

        # count the lines of tgt_asset_type and save it to a variable called tgt_asset_type_count
        tgt_asset_type_count=$(echo "${tgt_asset_type}" | wc -l)

        # for 1 to tgt_asset_type_count, echo the i(th) element of tgt_asset_type to the    screen,    remove the quotes
        # Define an array called eligible_url_assets
        url_assets=()
        eligible_assets=()
        eligible_url_assets=()
        for ((i=1; i<=${tgt_asset_type_count}; i++)); do
            this_eligible_for_submission=$(echo "${tgt_eligible_for_submission}" | sed -n "${i}p" | sed 's/"//  g')
            # if this_eligible_for_submission is true:
            if [ $this_eligible_for_submission == "true" ]; then
                this_asset_type=$(echo "${tgt_asset_type}" | sed -n "${i}p" | sed 's/"//g')
                this_asset_identifier=$(echo "${tgt_asset_identifier}" | sed -n "${i}p" | sed 's/"//  g')
                this_eligible_for_bounty=$(echo "${tgt_eligible_for_bounty}" | sed -n "${i}p" | sed   's/   "//  g')

                # If this_asset_type is "URL", append this_asset_identifier to the url_assets array
                if [ "${this_asset_type}" == "URL" ]; then
                  url_assets+=("${this_asset_identifier}")
                fi

                # If this_eligible_for_bounty is "true", append this_asset_identifier to the      eligible_assets array
                if [ "${this_eligible_for_bounty}" == "true" ]; then
                  eligible_assets+=("${this_asset_identifier}")
                fi

                # If this_asset_type is "URL" and this_eligible_for_bounty is "true", append      this_asset_identifier to the eligible_url_assets array
                if [ "${this_asset_type}" == "URL" ] && [ "${this_eligible_for_bounty}" == "true" ];  then
                  eligible_url_assets+=("${this_asset_identifier}")
                fi
            fi
        done

        # If error code is 1, exit with error message and error code.
        if [ $? -eq 1 ]; then
            seterror "Error processing scopes"
        fi

        # If url eq 1 and eligible eq 1, echo the eligible_url_assets array to the screen
        if [ $url -eq 1 ] && [ $eligible -eq 1 ]; then
            for thisurl in "${eligible_url_assets[@]}"; do
              echo "${thisurl}"
            done
        # If url eq 1 and eligible eq 0, echo the url_assets array to the screen
        elif [ $url -eq 1 ] && [ $eligible -eq 0 ]; then
            for thisurl in "${url_assets[@]}"; do
              echo "${thisurl}"
            done
        # If url eq 0 and eligible eq 1, echo the eligible_assets array to the screen
        elif [ $url -eq 0 ] && [ $eligible -eq 1 ]; then
            for thisurl in "${eligible_assets[@]}"; do
              echo "${thisurl}"
            done
        fi
    
    # If eligible_url is set, only return scopes with eligible_url set to true
    elif [ $eligible_url -eq 0 ]; then
        echo $scopes | jq
    fi
fi