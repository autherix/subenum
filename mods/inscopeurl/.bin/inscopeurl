#!/usr/bin/env bash

rt="/ptv"
hrt="${rt}/healer"
source "${rt}/rtsetup.sh"

help() {
    echo -e "inscopeurl - submodule of subenum - healerenum - healer - get scopes, process them, find wildcard scopes and run sub enumerations on them

Usage:
\tinscopeurl -t|--target <targetname> [options]

Options:
\t-t|--target\t*(Required)*\tTarget Name
\t-h|--help\t\t\tShow this help message and exit
\t--eligible\t\t\tResolve only eligible URL assets

Examples:
\tinscopeurl -t semrush --eligible\tFinds all eligible-for-bounty URL scopes for target called semrush
\tinscopeurl -t elastic\t\tFinds all in-scopes for target called elastic (as json | jq)
"
}

# Parsing flags
eligible_url=0
tgtname=""
while [ -n "$1" ]; do
    key="$1"
    case "$key" in
      -h|--help)
        shift
        help;
        exit 0
        ;;
      -t|--target)
        # If a $2 exists, set tgtname to $2, otherwise exit with error message saying "No target name given"
        if [ -z "$2" ]; then
            seterror "No target name given"
        else
            tgtname=$2
        fi

        shift 2
        ;;
      --eligible)
        eligible_url=1
        shift
        ;;
      --)
        shift
        break
        ;;
      -*|--*)
        echo "Unknown option: $1"
        sep
        help
        exit 1
        ;;
      *)
        echo "Unknown option: $1"
        sep
        help
        exit 1
        ;;
    esac
done

# Check if $tgtname exists, if not exit with error message saying "No target name given", if it does, set tgtname cto $tgtname
if [ -z "$tgtname" ]; then
    echo "No target name given"
    sep
    help
    exit 1
else
    tgtname=$tgtname
fi

### Fetch Scopes

# Run scoper on the given target name ($tgtname) and save it on a variable called url_scope.
# If eligible_url is 1, then only print the scopes that are eligible for the target name.
if [ $eligible_url -eq 1 ]; then
    url_scope=$(scoper -t $tgtname --url --eligible)
else
    url_scope=$(scoper -t $tgtname --url)
fi
# url_scope=$(echo "${url_scope}" | grep -oP "https?://[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+")

# If the above command returns an error, exit with error message and error code.
if [ $? -ne 0 ]; then 
    seterror "Error while running scoper"
fi

# remove http:// or https:// from the url_scope variable on each line, then remove te last / from the url_scope variable on each line.
echo "${url_scope}" | sed 's/https\?:\/\///g' | sed 's/\/$//g'