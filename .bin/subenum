#!/usr/bin/env bash

# Arguments
platform=""
db="enum"
target=""
POSITIONAL=()
active=false

# Usage
Usage() {
    printf "\n\e[1mUSAGE:\e[0m\n"
    printf "\tsubenum \e[33m--database|-db\e[0m \e[32m<database>\e[0m[\e[33mOpt\e[0m] \e[33m--target|-t\e[0m \e[32m<target>\e[0m \e[33m--scope|-s\e[0m \e[32m<scope>\e[0m \e[33m--args\e[0m \n\n"
    printf "\e[1mOPTIONS:\e[0m\n"
    printf "\t\e[33m--database|-db\e[0m \e[32m<database>\e[0m\tDatabase to use (default: enum)\n"
    printf "\t\e[33m--target|-t\e[0m \e[32m<target>\e[0m\t\tTarget to enumerate\n"
    printf "\t\e[33m--raw-scope|-rs\e[0m \e[32m<scope>\e[0m\t\tScope to enumerate\n"
    printf "\t\e[33m--active\e[0m\t\t\tWhether to run active subdomain enumeration or not(default: false)\n"
    printf "\t\e[33m--args\e[0m\t\t\t\tRemaining positional arguments\n\n"
    printf "\e[1mHINT:\e[0m\n"
    printf "\tUsing flag \e[33m--scope|-s\e[0m without providing \e[33m--target|-t\e[0m means you're working on a raw target which is not going to be saved in database\n\n"
    printf "\e[1mEXAMPLE:\e[0m\n"
    printf "\tsubenum -p h1 -db enum -t semrush -s semrush.com --args\n\n"
}

# Error
seterror() {
    echo -e "\e[31m[-] Error: $1\e[0m"
    exit 1
}

scope=""
# Parse arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            Usage
            exit 0
            ;;
        -db|--database)
            db="$2"
            shift
            shift
            ;;
        -t|--target)
            target="$2"
            shift
            shift
            ;;
        -s|--scope)
            raw_scope="$2"
            shift
            shift
            ;;
        --active)
            active=true
            shift
            ;;
        --args)
            # Add remaining args to POSITIONAL until end of args or next flag(starting with -)
            while [[ $# -gt 0 ]]; do
                key="$1"
                if [[ $key == -* ]]; then
                    break
                fi
                POSITIONAL+=("$1")
                shift
            done
            break
            ;;
        *)
            echo "Unknown option: $key"
            Usage
            exit 1
            ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters -> it means that $1 will be the first positional argument, $2 will be the second positional argument, and so on

# if db is empty, set it to enum
[[ -z $db ]] && db="enum"

# echo scope
printf "Database: %s\n" "${db:-\e[31mNone\e[0m}" | sed 's/\\e/\x1b/g'
printf "Target: %s\n" "${target:-\e[31mNone\e[0m}" | sed 's/\\e/\x1b/g'
printf "Scope: %s\n" "${scope:-\e[31mNone\e[0m}" | sed 's/\\e/\x1b/g'

# Check if target is empty, if so, show error and exit 1
[[ -z $target ]] && seterror "No target name provided"

# if raw_scope is empty:
if [[ -z $raw_scope ]]; then

    # Run scoper_h1.py -t $target, if no error occured and output is not empty, set the scope variable to the output
    scope=$(scoper_h1.py -t $target 2>&1 | jq -r '.relationships.structured_scopes.data[].attributes | select(.eligible_for_submission == true) | select(.asset_type == "WILDCARD" or .asset_type == "URL") | .asset_identifier' 2>&1)
    # scope=$(scoper_h1.py -t $target 2>&1 | jq -r '.relationships.structured_scopes.data[].attributes | select(.asset_type == "WILDCARD" or .asset_type == "URL") | .asset_identifier, .instruction' 2>&1)

    # If scope is empty or error occured, set scope to ""
    if [[ $? -ne 0 || -z $scope ]]; then
        # Run scoper_bc.py -t $target, if no error occured and output is not empty, set the scope variable to the output
        scope=$(scoper_bc.py -t $target 2>&1 | jq -r '.target_groups_info.groups_all_data[] | select(.in_scope==true) | (.targets_info.targets[] | select(.category != "other") | select(.category != "ios") | select(.category != "android") | .name, .uri)' 2>&1)
        # scope=$(scoper_bc.py -t $target 2>&1 | jq -r '.target_groups_info.groups_all_data[] | select(.in_scope==true) | (.targets_info.targets[] | select(.category != "other") | select(.category != "ios") | select(.category != "android") | .name, .uri, .description)' 2>&1)
    fi
    scope=$(echo $scope | tr "\n" " ")
else
    # set scope to provided scope
    scope="$raw_scope"
fi

printf "Scope: %s\n" "${scope:-\e[31mNone\e[0m}" | sed 's/\\e/\x1b/g'

# If scope is empty or error occured, set scope to ""
if [[ $? -ne 0 || -z $scope ]]; then
    seterror "Error running scoper_h1.py and scoper_bc.py or no scope found for the provided target"
fi

scope=$(echo $scope | tr "\n" " ")

# printf "Current scope: $scope\n\n"

text=$scope
urls=()
wildsub=()
singlesub=()

# Find and extract URLs
url_regex='(http|https):\/\/[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+'
# printf "looking for urls\n"
while [[ $text =~ $url_regex ]]; do
    urls+=("${BASH_REMATCH[0]}")
    text=${text/"${BASH_REMATCH[0]}"}
done

# Find and extract wildcard subdomains
wildsub_regex='(\*\.)[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+'
# printf "looking for wildcard subdomains\n"
while [[ $text =~ $wildsub_regex ]]; do
    wildsub+=("${BASH_REMATCH[0]}")
    text=${text/"${BASH_REMATCH[0]}"}
done

# Find and extract single subdomains, the last part .tld could not be only numbers, so we have sth.sth.(sth could not be only numbers)
singlesub_regex='[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)?(\.[a-zA-Z0-9_-]?[a-zA-Z]+[a-zA-Z0-9_-]?)+'
# singlesub_regex='[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+'
# printf "looking for single subdomains\n"
while [[ $text =~ $singlesub_regex ]]; do
    # save to temp_singlesub
    temp_singlesub="${BASH_REMATCH[0]}"
    # remove it from the text
    text=${text/"${BASH_REMATCH[0]}"}
    # if not starting with com. or ending with .google.com or .amazon.com or .microsoft.com or .apple.com or .facebook.com or readme.md or github.com or ending with .amazonaws.com or bugcrowd.com, add it to singlesub array
    if [[ $temp_singlesub != "com."* && $temp_singlesub != *".google.com" && $temp_singlesub != *".amazon.com" && $temp_singlesub != *".microsoft.com" && $temp_singlesub != *".apple.com" && $temp_singlesub != *".facebook.com" && $temp_singlesub != "README.md" && $temp_singlesub != "github.com" && $temp_singlesub != *".amazonaws.com" && $temp_singlesub != *".bugcrowd.com" ]]; then
        singlesub+=("$temp_singlesub")
    fi
done

# First make all of them small letters, then remove duplicates from urls, wildsub and singlesub
urls=($(echo "${urls[@]}" | tr ' ' '\n' | tr '[:upper:]' '[:lower:]' | sort -u | tr '\n' ' '))
wildsub=($(echo "${wildsub[@]}" | tr ' ' '\n' | tr '[:upper:]' '[:lower:]' | sort -u | tr '\n' ' '))
singlesub=($(echo "${singlesub[@]}" | tr ' ' '\n' | tr '[:upper:]' '[:lower:]' | sort -u | tr '\n' ' '))

# Print the lists
# print in green urls
echo -e "\e[32mURLs:\e[0m"
printf '%s\n' "${urls[@]}"
echo
# print in green wildcard subdomains
echo -e "\e[32mWildcard Subdomains:\e[0m"
printf '%s\n' "${wildsub[@]}"
echo
# print in green single subdomains
echo -e "\e[32mSingle Subdomains:\e[0m"
printf '%s\n' "${singlesub[@]}"

printf "====================================\n"

# Iterate over all wildsub, remove first *. from the start of each line, remove duplicates, replace newlines with spaces, run domext, append to domains list
Domains=()
for i in ${wildsub[@]}; do
    # echo $i
    # echo $i | sed 's/\*\.//g' | sort -u | tr '\n' ' ' | domext | xargs -I DOMAIN Domains+=("DOMAIN")
    for j in $(echo $i | sed 's/\*\.//g' | sort -u | tr '\n' ' '); do
        Domains+=("$j")
        Domains+=("$(domext $j)")
    done
done

# Iterate over all singlesub, run domext, append to domains list
for i in ${singlesub[@]}; do
    # echo $i
    # echo $i | domext | xargs -I DOMAIN Domains+=("DOMAIN")
    Domains+=("$(domext $i)")
done

# Remove duplicates from domains list
Domains=($(echo "${Domains[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
# Print domains list
printf "Domains:\n"
printf '%s\n' "${Domains[@]}"
printf "====================================\n"
        
# If domains list is empty, exit 0
if [[ -z $Domains ]]; then
    # echo orange
    echo -e "\e[33m[+] No inscope scopes found\e[0m"
    exit 0
fi

# convert domains list to string with delimiter " "
Domains=$(printf '%s\n' "${Domains[@]}")

# remove duplicates from domains list
Domains=($(echo "${Domains[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

# Add domains to the database using healerdb
for i in ${Domains[@]}; do
    printf "adding domain: \e[32m$i\e[0m to database\n"
    new_domain=$(healerdb domain create -db $db -t $target -d $i -j | jq -r '.result')
    # if new_domain is not empty and its len is 24 and scope was not set in args, print in purple new domain added: $i
    if [[ ! -z $new_domain ]] && [[ ${#new_domain} -eq 24 ]] && [[ -z $raw_scope ]]; then
        printf "\e[35m[+] New domain added: $i\e[0m\n"
        # notifio -t "New domain: $i" -m "New domain added to database: $i" --discord -ch "subenum"
    fi
done

# if singlesub is empty, print in yellow
if [[ -z $singlesub ]]; then
    printf "\e[33m[+] No single subdomains found\e[0m\n"
else
    # Add single subdomains to the database using healerdb
    for i in ${singlesub[@]}; do
        domain=$(domext $i)
        printf "adding single subdomain: \e[32m$i\e[0m from domain \e[32m$domain\e[0m to database\n"
        new_single_subdomain=$(healerdb subdomain multi-create -db $db -t $target -d $domain -sub $i -j | jq -r '.result')
        # if new_single_subdomain is equal to $i, print in purple new single subdomain added: $i
        if [[ $new_single_subdomain == $i ]] && [[ -z $raw_scope ]]; then
            printf "\e[35m[+] New single subdomain added: $i\e[0m\n"
            # notifio -t "New single subdomain: $i" -m "New single subdomain added to database: $i" --discord -ch "subenum"
        fi
    done
fi

# convert wildsub to string with delimiter "\n" 
wildsub=$(printf '%s\n' "${wildsub[@]}")

# remove first *. from each wildcard subdomain, remove duplicates, sort -u
wildsub=$(echo $wildsub | sed 's/\*\.//g' | sort -u)

# Make a string ready for subfinder like -d domain1 -d domain2 -d domain3
wildsub_subfinder="$(echo $wildsub | tr -d '\n' | xargs -d" " -I C_SCOPE echo -d C_SCOPE)"
# replace newlines with space
wildsub_subfinder=$(echo $wildsub_subfinder | tr '\n' ' ')

# if wildsub_subfinder is empty, print in yellow 
if [[ -z $wildsub_subfinder ]]; then
    printf "\e[33m[+] No wildcard subdomains found\e[0m\n"
    # print in green subdomain enumeration is finished and exit 0
    echo -e "\e[32m[+] Subdomain enumeration is finished\e[0m"
    exit 0
fi

# Run subfinder on wildsub and save the results to a variable called subfinder_results_wild
# printf "Running subfinder on wildsub_subfinder: $wildsub_subfinder\n"
# subfinder_results_wild=$(subfinder $wildsub_subfinder -oJ -silent -all)

# print subfinder_results_wild
# echo "subfinder_results_wild:"
# echo $subfinder_results_wild

# define a global variable array of string to save the result files' path
declare -a result_files

run_subfinder_single() {
    tmp_result_file="/tmp/subfinder_results_single.txt"
    subfinder -d $1 -silent -all > $tmp_result_file
    # Add the result file to result_files array
    result_files+=("$tmp_result_file")

    # print the count of the result in color
    total_sub_count=$(wc -l $tmp_result_file | awk '{print $1}')
    printf "\e[33m[+] Total subdomains found by \e[32msubfinder\e[0m: %d\e[0m\n" $total_sub_count
}

run_crtsh_single() {
    tmp_result_file="/tmp/crtsh_results_single.txt"
    curl -s "https://crt.sh/?q=$1&output=json" | jq -r ".[].common_name, .[].name_value" | sort -u | sed 's/\*\.//g' | sort -u | grep -E ".*$1$" | sort -u > $tmp_result_file

    # Add the result file to result_files array
    result_files+=("$tmp_result_file")

    # print the count of the result in color
    total_sub_count=$(wc -l $tmp_result_file | awk '{print $1}')
    printf "\e[33m[+] Total subdomains found by \e[32mcrt.sh\e[0m: %d\e[0m\n" $total_sub_count
}

run_dnsgen_single() {
    tmp_result_file="/tmp/dnsgen_results_single.txt"
    cat $1 | dnsgen - > $tmp_result_file

    # print the count of the result in color
    total_sub_count=$(wc -l $tmp_result_file | awk '{print $1}')
    printf "\e[33m[+] Total subdomains generated by \e[32mdnsgen\e[0m: %d\e[0m\n" $total_sub_count
}

run_massdns_single() {
    tmp_result_file="/tmp/massdns_results_single.txt"
    cat $1 | massdns -r /lst/resolver/resolvers-trusted.txt -t A -o J --flush 2>/dev/null > $tmp_result_file
    # Add the result file to result_files array
    result_files+=("$tmp_result_file")

    # print the count of the result in color
    total_sub_count=$(wc -l $tmp_result_file | awk '{print $1}')
    printf "\e[33m[+] Total subdomains found by \e[32mmassdns\e[0m: %d\e[0m\n" $total_sub_count
}

run_puredns_single() {
    subdomains_filename=$1
    outputname="/tmp/puredns_results_single.txt"
    RESOLVER_FILENAME="/lst/resolver/resolvers-trusted.txt"
    puredns resolve $subdomains_filename --resolvers $RESOLVER_FILENAME -q > $outputname

    # Add the result file to result_files array
    result_files+=("$outputname")

    # print the count of the result in color
    total_sub_count=$(wc -l $outputname | awk '{print $1}')
    printf "\e[33m[+] Total subdomains found by \e[32mpuredns\e[0m: %d\e[0m\n" $total_sub_count
}

run_shuffledns_single() {
    tmp_result_file="/tmp/shuffledns_results_single.txt"
    shuffledns_domain=$1
    shuffledns_wordlist=$2

    # if $2 not provided, set it to /lst/sub/subdomains-top1million-20000.txt
    [[ -z $shuffledns_wordlist ]] && shuffledns_wordlist="/lst/sub/subdomains-top1million-20000.txt"

    printf "running shuffledns on domain: $shuffledns_domain with wordlist: $shuffledns_wordlist\n"
    
    shuffledns -d $shuffledns_domain -list $shuffledns_wordlist -r /lst/resolver/resolvers-trusted.txt -o $tmp_result_file -silent

    printf "successfully ran shuffledns!"

    # cat file, add $1 to the end of each line, remove duplicates, sort -u, save to tmp_result_file
    cat $tmp_result_file | xargs -I DOMAIN echo DOMAIN.$1 | sort -u > $tmp_result_file

    printf "shuffledns results:\n"
    cat $tmp_result_file

    # Add the result file to result_files array
    result_files+=("$tmp_result_file")

    # print the count of the result in color
    total_sub_count=$(wc -l $tmp_result_file | awk '{print $1}')
    printf "\e[33m[+] Total subdomains found by \e[32mshuffledns\e[0m: %d\e[0m\n" $total_sub_count
}

# iterate over wildsub and add them to the database 
for i in ${wildsub[@]}; do
    echo "current domain: $i"

    # subfinder
    run_subfinder_single $i

    # crt.sh
    run_crtsh_single $i

    # merge results together into /tmp/total_passive_result.txt
    # printf '%s\n' "${result_files[@]}"
    cat "${result_files[@]}" | sort -u > /tmp/total_passive_result.txt # && rm "${result_files[@]}" && result_files=()

    total_passive_file="/tmp/total_passive_result.txt"
    passive_count=$(wc -l $total_passive_file | awk '{print $1}')
    printf "Total passive result count: \e[33m$passive_count\e[0m\n"


    ## Active enumeration
    
    # copy /tmp/total_passive_result.txt to /tmp/total_result.txt
    cp /tmp/total_passive_result.txt /tmp/total_result.txt
    
    # If active is true, run active enumeration on the current domain
    if [[ $active == true ]]; then

        # Run shuffledns on the default wordlist "/lst/sub/subdomains-top1million-20000.txt"
        run_shuffledns_single $i "/lst/sub/subdomains-top1million-20000.txt"

        # append shuffledns result file to /tmp/total_result.txt and remove duplicates from that file
        cat /tmp/shuffledns_results_single.txt >> /tmp/total_result.txt && sort -u /tmp/total_result.txt -o /tmp/total_result.txt && rm /tmp/shuffledns_results_single.txt && result_files=() && rm /tmp/total_passive_result.txt

        # Run dnsgen with wordlist total result file
        run_dnsgen_single "/tmp/total_result.txt"

        # run shuffledns on the dnsgen result file
        run_shuffledns_single $i "/tmp/dnsgen_results_single.txt"

        # append shuffledns result file to /tmp/total_result.txt and remove duplicates from that file
        cat /tmp/shuffledns_results_single.txt >> /tmp/total_result.txt && sort -u /tmp/total_result.txt -o /tmp/total_result.txt && rm /tmp/shuffledns_results_single.txt && result_files=() && rm /tmp/dnsgen_results_single.txt
    fi

    # run healerdb to add the list of subdomains to the database
    new_subdomains=$(healerdb subdomain multi-create -db $db -t $target -d $i -sub "/tmp/total_result.txt" -j | jq -r '.result')
    # if new_subdomains is not empty, print in purple new subdomains added: $new_subdomains
    if [[ ! -z $new_subdomains ]] && [[ $new_subdomains != [] ]] && [[ -z $raw_scope ]]; then
        printf "\e[35m[+] New subdomains added: $new_subdomains\e[0m\n"
        # notifio -t "New subdomains: $new_subdomains" -m "New subdomains added to database: $new_subdomains" --discord -ch "subenum"
    fi
    
    # remove the temporary file
    rm /tmp/total_result.txt && result_files=()
done

# print in green subdomain enumeration is finished and exit 0
echo -e "\e[32m[+] Subdomain enumeration is finished\e[0m"
exit 0